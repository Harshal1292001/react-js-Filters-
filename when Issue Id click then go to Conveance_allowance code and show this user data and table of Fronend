To achieve the functionality where clicking on an IssueId in the NonApproved component navigates to the Conveyance_Allowance component and populates the Employee Name, Department, and Emp_Id fields based on the selected IssueId, you need to make modifications to both components. The goal is to pass the relevant data (Employee Name, Department, and EmpCode) from NonApproved to Conveyance_Allowance via URL parameters or state, and then use that data to set the form fields in Conveyance_Allowance. Below are the steps to implement this:

Modifications to NonApproved Component


Update the Link to Pass Additional Data: Modify the Link in the NonApproved component to include Employee_Name, Department, and EmpCode as query parameters when navigating to the Conveyance_Allowance page.
In the NonApproved component, update the Link in the table to include these fields:
jsx<td>
  <Link
    to={`/Conveyance_Allowance?issueId=${employee.IssueId}&employeeName=${encodeURIComponent(employee.Employee_Name || '')}&department=${encodeURIComponent(employee.Department || '')}&empCode=${encodeURIComponent(employee.EmpCode || '')}`}
    className="text-blue-600 hover:underline"
  >
    {employee.IssueId || "-"}
  </Link>
</td>
Here, encodeURIComponent is used to safely encode the query parameters to handle special characters or spaces.


Fix the Filter Logic: In the NonApproved component, the filter logic for employeeData has an issue where name is not defined in the condition String(employee.SubmittedTo) === String(name). Since you want to filter based on Emp_Id, you can remove the undefined name reference and correct the filter logic. Update the fetchEmployeeData function as follows:
jsxconst filteredData = Array.isArray(employeeResponse.data)
  ? employeeResponse.data.filter(
      (employee) => String(employee.BuildingId) === String(Emp_Id)
    )
  : [];
This ensures that only records matching the logged-in user's Emp_Id (stored in BuildingId) are displayed.



Modifications to Conveyance_Allowance Component


Update Imports: As requested, update the import statement for React hooks to include useCallback and useRef:
jsximport React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
Note: useCallback and useRef are already used in the Conveyance_Allowance component, so this change aligns with your request.


Retrieve Query Parameters: In the Conveyance_Allowance component, use the useSearchParams hook to retrieve employeeName, department, and empCode from the URL query parameters, in addition to issueId.
Update the Conveyance_Allowance component to extract these parameters:
jsxfunction Conveyance_Allowance() {
  const [searchParams] = useSearchParams();
  const issueIdFromUrl = searchParams.get("issueId");
  const employeeNameFromUrl = searchParams.get("employeeName");
  const departmentFromUrl = searchParams.get("department");
  const empCodeFromUrl = searchParams.get("empCode");

  const [formData, setFormData] = useState({
    FromDate: "",
    ToDate: "",
    VehicleType: "",
    VehicleNo: "",
    Emp_Id: empCodeFromUrl || "",
    employeeName: employeeNameFromUrl || "",
    Dept_Name: departmentFromUrl || "",
    IssueId: issueIdFromUrl || "new",
    IssueDate: "",
    fromLocation: "",
    toLocation: [],
    TotalKM: "",
    Rate: "",
    BillAmount: "",
    Remark: "",
    googleMapUrl: "",
    Department: departmentFromUrl || "",
  });
  // ... rest of the component
}
Here, the formData state is initialized with the values from the URL query parameters (employeeNameFromUrl, departmentFromUrl, empCodeFromUrl) if they exist, ensuring the input fields are populated with the data passed from NonApproved.


Update Employee Data Fetch: The current useEffect hook that fetches employee data based on loginName may overwrite the URL-provided values. To avoid this, modify the fetchEmployeeData useEffect to only fetch data if the URL parameters are not provided or if isSpecificIssue is false. Update the useEffect for fetching employee data as follows:
jsxuseEffect(() => {
  const fetchEmployeeData = async () => {
    if (!loginName || (issueIdFromUrl && employeeNameFromUrl && departmentFromUrl && empCodeFromUrl)) return;
    try {
      const response = await axios.get(`https://localhost:1234/api/EmployeePortal/${loginName}`);
      const employees = response.data;
      if (employees.length > 0) {
        const employee = employees[0];
        setFormData((prev) => ({
          ...prev,
          Dept_Name: employee.Dept_Name || prev.Dept_Name,
          Emp_Id: employee.Emp_Id || prev.Emp_Id,
          employeeName: loginName || prev.employeeName,
        }));
      } else {
        toast.error("No employee data found");
      }
    } catch (error) {
      console.error("Error fetching employee data:", error);
      toast.error("Failed to fetch employee data");
    }
  };
  fetchEmployeeData();
}, [loginName, issueIdFromUrl, employeeNameFromUrl, departmentFromUrl, empCodeFromUrl]);
This ensures that if the URL contains employeeName, department, and empCode, the form fields are populated with those values instead of fetching from the API.


Ensure Form Fields Reflect URL Data: When the issueIdFromUrl changes, ensure the form fields are updated with the URL-provided data. Add a useEffect to handle this:
jsxuseEffect(() => {
  if (issueIdFromUrl) {
    setFormData((prev) => ({
      ...prev,
      IssueId: issueIdFromUrl,
      employeeName: employeeNameFromUrl || prev.employeeName,
      Dept_Name: departmentFromUrl || prev.Dept_Name,
      Emp_Id: empCodeFromUrl || prev.Emp_Id,
      Department: departmentFromUrl || prev.Department,
    }));
    setIsSpecificIssue(true);
    toast.info(`Loading data for Issue ID: ${issueIdFromUrl}`);
  } else {
    setFormData((prev) => ({
      ...prev,
      IssueId: "new",
      employeeName: employeeNameFromUrl || prev.employeeName,
      Dept_Name: departmentFromUrl || prev.Dept_Name,
      Emp_Id: empCodeFromUrl || prev.Emp_Id,
      Department: departmentFromUrl || prev.Department,
    }));
    setIsSpecificIssue(false);
  }
}, [issueIdFromUrl, employeeNameFromUrl, departmentFromUrl, empCodeFromUrl]);
This replaces the existing useEffect for setting IssueId and ensures that employeeName, Dept_Name, and Emp_Id are set based on the URL parameters.


Update Input Fields: Ensure the input fields for employeeName, Emp_Id, and Dept_Name in the form reflect the formData values and are optionally read-only if coming from the URL to prevent accidental changes:
jsx<div className="col-md-2">
  <label className="form-label fw-medium">
    Employee Name <span className="text-danger">*</span>
  </label>
  <input
    type="text"
    name="employeeName"
    className={`form-control shadow-sm ${errors.employeeName ? "is-invalid" : ""}`}
    value={formData.employeeName}
    onChange={handleChange}
    placeholder="Enter full name"
    readOnly={!!issueIdFromUrl} // Make read-only if coming from NonApproved
  />
  <ErrorMessage fieldName="employeeName" />
</div>
<div className="col-md-2">
  <label className="form-label fw-medium">
    Employee Code <span className="text-danger">*</span>
  </label>
  <input
    type="text"
    name="Emp_Id"
    className={`form-control shadow-sm ${errors.Emp_Id ? "is-invalid" : ""}`}
    value={formData.Emp_Id}
    onChange={handleChange}
    placeholder="Enter employee code"
    readOnly={!!issueIdFromUrl} // Make read-only if coming from NonApproved
  />
  <ErrorMessage fieldName="Emp_Id" />
</div>
<div className="col-md-2">
  <label className="form-label fw-medium">
    Department <span className="text-danger">*</span>
  </label>
  <input
    type="text"
    name="Dept_Name"
    className={`form-control shadow-sm ${errors.Dept_Name ? "is-invalid" : ""}`}
    value={formData.Dept_Name}
    onChange={handleChange}
    placeholder="Enter department"
    readOnly={!!issueIdFromUrl} // Make read-only if coming from NonApproved
  />
  <ErrorMessage fieldName="Dept_Name" />
</div>
Setting readOnly={!!issueIdFromUrl} ensures these fields are non-editable when navigating from NonApproved, preserving the data passed via the URL.



Explanation of Changes

NonApproved Component:

The Link now includes employeeName, department, and empCode as query parameters, ensuring the necessary data is passed to Conveyance_Allowance.
Fixed the filter logic to correctly filter records based on Emp_Id (stored in BuildingId).


Conveyance_Allowance Component:

Updated the imports to include useCallback and useRef as requested.
Extracted employeeName, department, and empCode from the URL using useSearchParams.
Initialized formData with these URL parameters to populate the input fields.
Modified the employee data fetch logic to skip fetching if URL parameters are provided, preventing overwriting.
Added a useEffect to update formData when URL parameters change.
Made the employeeName, Emp_Id, and Dept_Name input fields read-only when navigating from NonApproved to maintain data integrity.




Additional Notes

API Consistency: Ensure that the Employee_Name, Department, and EmpCode fields in the NonApproved component's employeeData match the expected field names in the API response (PetrolHead endpoint). If the field names differ (e.g., EmpCode vs. Emp_Id), adjust the Link parameters accordingly.
Error Handling: The Conveyance_Allowance component already has robust error handling with toast notifications. Ensure the API endpoints (PetrolHead, PetrolDetails, EmployeePortal, LocationMaster) are accessible and return the expected data structure.
Security: Using encodeURIComponent in the Link prevents issues with special characters in query parameters. Ensure the backend handles these parameters correctly.
Testing: Test the navigation by clicking an IssueId in NonApproved and verify that the Conveyance_Allowance form correctly displays the Employee Name, Department, and Emp_Id from the URL. Also, test cases where the URL parameters are missing to ensure the form falls back to fetching data based on loginName.


Final Updated Code Snippets
NonApproved Component (Relevant Changes)
jsximport React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import { Link } from "react-router-dom";

function NonApproved() {
  const [employeeData, setEmployeeData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    issueId: "",
    Approved: "",
    SubmittedTo: "",
    SubmittedDate: "",
  });
  const [updateStatus, setUpdateStatus] = useState(null);
  const [employeeNameData, setEmployeeNameData] = useState([]);
  const [employeeSearch, setEmployeeSearch] = useState("");

  const Emp_Id = localStorage.getItem("login_IdMain");

  const processDate = (fromDate) => {
    const date = new Date(fromDate);
    if (!isNaN(date.getTime())) {
      const monthName = date.toLocaleDateString("en-US", { month: "long" });
      const yearName = date.getFullYear();
      return { monthName, yearName, isValid: true };
    }
    return { monthName: "Invalid", yearName: "Invalid", isValid: false };
  };

  useEffect(() => {
    const fetchEmployeeData = async () => {
      if (!Emp_Id) {
        setError("User ID not found. Please log in again.");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        console.log("Fetching data for Emp_Id:", Emp_Id);
        const employeeResponse = await axios.get(
          `https://localhost:1234/api/PetrolHead`
        );
        console.log("API Response:", employeeResponse.data);

        const filteredData = Array.isArray(employeeResponse.data)
          ? employeeResponse.data.filter(
              (employee) => String(employee.BuildingId) === String(Emp_Id)
            )
          : [];

        const processedData = filteredData.map((employee) => {
          const { monthName, yearName } = processDate(employee.FromDate);
          return { ...employee, monthName, yearName };
        });

        if (processedData.length === 0) {
          setError("No data found for this user.");
        } else {
          setEmployeeData(processedData);
        }
      } catch (err) {
        setError(
          err.response?.status === 404
            ? "No data found for this user."
            : "Failed to fetch employee data. Please try again later."
        );
        console.error("API Error:", err);
      } finally {
        setLoading(false);
      }
    };

    const fetchEmployeeNames = async () => {
      try {
        const response = await axios.get(
          `https://localhost:1234/api/EmployeePortal/Emp-Name`
        );
        console.log("Employee Names API Response:", response.data);
        setEmployeeNameData(Array.isArray(response.data) ? response.data : []);
      } catch (err) {
        console.error("Employee Names API Error:", err);
        setError("Failed to fetch employee names. Please try again later.");
      }
    };

    fetchEmployeeData();
    fetchEmployeeNames();
  }, [Emp_Id]);

  // ... (rest of the component remains unchanged until the table)

  return (
    <div className="fluid-container mx-auto p-4">
      {/* ... form code remains unchanged ... */}
      <div className="table-responsive">
        <table className="table table-hover table-bordered align-middle">
          <thead className="table-dark">
            <tr>
              <th scope="col">Employee Name</th>
              <th scope="col">Department</th>
              <th scope="col">Vehicle No</th>
              <th scope="col">Total Bill Amount</th>
              <th scope="col">Issue ID</th>
              <th scope="col">Travel Date</th>
              <th scope="col">Month</th>
              <th scope="col">Total Km</th>
              <th scope="col">Approved</th>
              <th scope="col">Submit To</th>
              <th scope="col">Submitted Date</th>
              <th scope="col">HoD Approved</th>
              <th scope="col">Post</th>
              <th scope="col">Post Date</th>
            </tr>
          </thead>
          <tbody>
            {employeeData.length > 0 ? (
              employeeData.map((employee) => (
                <tr
                  key={
                    employee.IssueId || employee.EmpCode || employee.BuildingId
                  }
                  className="even:bg-gray-100"
                >
                  <td>{employee.Employee_Name || "-"}</td>
                  <td>{employee.Department || "-"}</td>
                  <td>{employee.VehicleNo || "-"}</td>
                  <td>{employee.BillAmount || "-"}</td>
                  <td>
                    <Link
                      to={`/Conveyance_Allowance?issueId=${employee.IssueId}&employeeName=${encodeURIComponent(employee.Employee_Name || '')}&department=${encodeURIComponent(employee.Department || '')}&empCode=${encodeURIComponent(employee.EmpCode || '')}`}
                      className="text-blue-600 hover:underline"
                    >
                      {employee.IssueId || "-"}
                    </Link>
                  </td>
                  <td>{employee.IssueDate || "-"}</td>
                  <td>{`${employee.monthName || "Invalid"}-${
                    employee.yearName || "Invalid"
                  }`}</td>
                  <td>{employee.TotalKM || "-"}</td>
                  <td>{employee.Approved || "-"}</td>
                  <td>{employee.SubmittedTo || "-"}</td>
                  <td>{employee.SubmittedDate || "-"}</td>
                  <td>{employee.HodApproved ? "Yes" : "No"}</td>
                  <td>{employee.Post || "-"}</td>
                  <td>{employee.PostDate || "-"}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="14" className="text-center">
                  No data available
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default NonApproved;
Conveyance_Allowance Component (Relevant Changes)
jsximport React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import axios from "axios";
import * as XLSX from "xlsx";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Travel_Entry_CSS/Conveyance_Allowance.css";
import TravelEntryNav from "./TravelEntryNav";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useSearchParams, Link } from "react-router-dom";

const VEHICLE_TYPES = {
  "four-wheeler": { label: "Four Wheeler", Rate: 10 },
  "two-wheeler": { label: "Two Wheeler", Rate: 5 },
  "public-transport": { label: "Public Transport", Rate: 3 },
  other: { label: "Other", Rate: 8 },
};

const VALIDATION_RULES = {
  FromDate: { required: false },
  ToDate: { required: false },
  VehicleType: { required: true },
  Emp_Id: { required: true },
  employeeName: { required: true },
  Dept_Name: { required: true },
  IssueDate: { required: true },
  fromLocation: { required: true },
  toLocation: { required: true },
  TotalKM: { required: true, min: 0.1 },
  Rate: { required: true, min: 0.1 },
  Remark: { required: false },
};

function Conveyance_Allowance() {
  const [searchParams] = useSearchParams();
  const issueIdFromUrl = searchParams.get("issueId");
  const employeeNameFromUrl = searchParams.get("employeeName");
  const departmentFromUrl = searchParams.get("department");
  const empCodeFromUrl = searchParams.get("empCode");

  const [formData, setFormData] = useState({
    FromDate: "",
    ToDate: "",
    VehicleType: "",
    VehicleNo: "",
    Emp_Id: empCodeFromUrl || "",
    employeeName: employeeNameFromUrl || "",
    Dept_Name: departmentFromUrl || "",
    IssueId: issueIdFromUrl || "new",
    IssueDate: "",
    fromLocation: "",
    toLocation: [],
    TotalKM: "",
    Rate: "",
    BillAmount: "",
    Remark: "",
    googleMapUrl: "",
    Department: departmentFromUrl || "",
  });

  const [entries, setEntries] = useState([]);
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [locations, setLocations] = useState([]);
  const [isLoadingLocations, setIsLoadingLocations] = useState(false);
  const [showLocationDropdown, setShowLocationDropdown] = useState(null);
  const [fromLocationSearchQuery, setFromLocationSearchQuery] = useState("");
  const [toLocationSearchQuery, setToLocationSearchQuery] = useState("");
  const [tableSearchQuery, setTableSearchQuery] = useState("");
  const [loginName] = useState(localStorage.getItem("username") || "");
  const [isSpecificIssue, setIsSpecificIssue] = useState(!!issueIdFromUrl);

  const fromLocationRef = useRef(null);
  const toLocationRef = useRef(null);
  const dropdownRef = useRef(null);

  // Memoized vehicle Rates
  const Rates = useMemo(() => {
    const RateMap = {};
    Object.keys(VEHICLE_TYPES).forEach((key) => {
      RateMap[key] = VEHICLE_TYPES[key].Rate;
    });
    return RateMap;
  }, []);

  // ... (other useMemo, useEffect, and functions remain unchanged)

  useEffect(() => {
    if (issueIdFromUrl) {
      setFormData((prev) => ({
        ...prev,
        IssueId: issueIdFromUrl,
        employeeName: employeeNameFromUrl || prev.employeeName,
        Dept_Name: departmentFromUrl || prev.Dept_Name,
        Emp_Id: empCodeFromUrl || prev.Emp_Id,
        Department: departmentFromUrl || prev.Department,
      }));
      setIsSpecificIssue(true);
      toast.info(`Loading data for Issue ID: ${issueIdFromUrl}`);
    } else {
      setFormData((prev) => ({
        ...prev,
        IssueId: "new",
        employeeName: employeeNameFromUrl || prev.employeeName,
        Dept_Name: departmentFromUrl || prev.Dept_Name,
        Emp_Id: empCodeFromUrl || prev.Emp_Id,
        Department: departmentFromUrl || prev.Department,
      }));
      setIsSpecificIssue(false);
    }
  }, [issueIdFromUrl, employeeNameFromUrl, departmentFromUrl, empCodeFromUrl]);

  useEffect(() => {
    const fetchEmployeeData = async () => {
      if (!loginName || (issueIdFromUrl && employeeNameFromUrl && departmentFromUrl && empCodeFromUrl)) return;
      try {
        const response = await axios.get(`https://localhost:1234/api/EmployeePortal/${loginName}`);
        const employees = response.data;
        if (employees.length > 0) {
          const employee = employees[0];
          setFormData((prev) => ({
            ...prev,
            Dept_Name: employee.Dept_Name || prev.Dept_Name,
            Emp_Id: employee.Emp_Id || prev.Emp_Id,
            employeeName: loginName || prev.employeeName,
          }));
        } else {
          toast.error("No employee data found");
        }
      } catch (error) {
        console.error("Error fetching employee data:", error);
        toast.error("Failed to fetch employee data");
      }
    };
    fetchEmployeeData();
  }, [loginName, issueIdFromUrl, employeeNameFromUrl, departmentFromUrl, empCodeFromUrl]);

  // ... (rest of the useEffect hooks and functions remain unchanged)

  return (
    <>
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />
      <TravelEntryNav />
      <div className="container-fluid conveyance-allowance py-4">
        <div className="row mb-3">
          <div className="col-12">
            <Link to="/NonApproved" className="btn btn-secondary">
              <i className="bi bi-arrow-left me-2"></i>Back to Non-Approved
            </Link>
          </div>
        </div>
        <div className="card shadow-lg border-0 mb-5 rounded-3">
          <div className="card-body p-4">
            {isLoading && (
              <div className="text-center py-3">
                <span className="spinner-border spinner-border-sm me-2"></span>
                Loading data for Issue ID: {formData.IssueId}...
              </div>
            )}
            <form onSubmit={handleSubmit}>
              <div className="mb-3">
                <h5 className="text-primary fw-bold mb-2">
                  <i className="bi bi-calendar me-2"></i>Period & Vehicle Details
                </h5>
                <div className="row g-3">
                  <div className="col-md-2">
                    <label className="form-label fw-medium">From Date</label>
                    <input
                      type="date"
                      name="FromDate"
                      className={`form-control shadow-sm ${errors.FromDate ? "is-invalid" : ""}`}
                      value={formData.FromDate}
                      onChange={handleChange}
                    />
                    <ErrorMessage fieldName="FromDate" />
                  </div>
                  <div className="col-md-2">
                    <label className="form-label fw-medium">To Date</label>
                    <input
                      type="date"
                      name="ToDate"
                      className={`form-control shadow-sm ${errors.ToDate ? "is-invalid" : ""}`}
                      value={formData.ToDate}
                      onChange={handleChange}
                    />
                    <ErrorMessage fieldName="ToDate" />
                  </div>
                  <div className="col-md-2">
                    <label className="form-label fw-medium">
                      Vehicle Type <span className="text-danger">*</span>
                    </label>
                    <select
                      name="VehicleType"
                      className={`form-select shadow-sm ${errors.VehicleType ? "is-invalid" : ""}`}
                      value={formData.VehicleType}
                      onChange={handleChange}
                    >
                      <option value="">Select Vehicle Type</option>
                      {Object.entries(VEHICLE_TYPES).map(([key, value]) => (
                        <option key={key} value={key}>
                          {value.label} ({value.Rate}/km)
                        </option>
                      ))}
                    </select>
                    <ErrorMessage fieldName="VehicleType" />
                  </div>
                  <div className="col-md-2">
                    <label className="form-label fw-medium">Vehicle Number</label>
                    <input
                      type="text"
                      name="VehicleNo"
                      className="form-control shadow-sm"
                      value={formData.VehicleNo}
                      onChange={handleChange}
                      placeholder="e.g., MH12AB1234"
                    />
                  </div>
                </div>
              </div>
              <div className="mb-3">
                <h5 className="text-primary fw-bold mb-2">
                  <i className="bi bi-person me-2"></i>Employee Information
                </h5>
                <div className="row g-3">
                  <div className="col-md-2">
                    <label className="form-label fw-medium">
                      Employee Name <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      name="employeeName"
                      className={`form-control shadow-sm ${errors.employeeName ? "is-invalid" : ""}`}
                      value={formData.employeeName}
                      onChange={handleChange}
                      placeholder="Enter full name"
                      readOnly={!!issueIdFromUrl}
                    />
                    <ErrorMessage fieldName="employeeName" />
                  </div>
                  <div className="col-md-2">
                    <label className="form-label fw-medium">
                      Employee Code <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      name="Emp_Id"
                      className={`form-control shadow-sm ${errors.Emp_Id ? "is-invalid" : ""}`}
                      value={formData.Emp_Id}
                      onChange={handleChange}
                      placeholder="Enter employee code"
                      readOnly={!!issueIdFromUrl}
                    />
                    <ErrorMessage fieldName="Emp_Id" />
                  </div>
                  <div className="col-md-2">
                    <label className="form-label fw-medium">
                      Department <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      name="Dept_Name"
                      className={`form-control shadow-sm ${errors.Dept_Name ? "is-invalid" : ""}`}
                      value={formData.Dept_Name}
                      onChange={handleChange}
                      placeholder="Enter department"
                      readOnly={!!issueIdFromUrl}
                    />
                    <ErrorMessage fieldName="Dept_Name" />
                  </div>
                </div>
              </div>
              {/* ... rest of the form and component remains unchanged ... */}
            </form>
          </div>
        </div>
        {/* ... rest of the component remains unchanged ... */}
      </div>
    </>
  );
}

export default Conveyance_Allowance;
