import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import * as XLSX from 'xlsx';

function TravelApprovedHR() {
  const [employeeData, setEmployeeData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    issueId: '',
    VoucherPost: '',
    VoucherDate: '',
  });
  const [updateStatus, setUpdateStatus] = useState(null);
  const name = localStorage.getItem('username')?.toLowerCase();

  // Helper: Convert binary string to ArrayBuffer
  const s2ab = (s) => {
    const buf = new ArrayBuffer(s.length);
    const view = new Uint8Array(buf);
    for (let i = 0; i < s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
    return buf;
  };

  // Format date to YYYY-MM-DD
  const formatDateToSQL = (dateString) => {
    if (!dateString) return null;
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? null : date.toISOString().split('T')[0];
  };

  const processDate = (fromDate) => {
    if (!fromDate) return { monthName: 'Unknown', yearName: 'Unknown' };
    const date = new Date(fromDate);
    return {
      monthName: date.toLocaleString('en-US', { month: 'long' }),
      yearName: date.getFullYear(),
    };
  };

  // ──────────────────────────────────────────────────────────────
  // Generate Excel with Auto-Width + Professional Styling
  // ──────────────────────────────────────────────────────────────
  const generateExcelBuffer = (record, monthName, yearName) => {
    const excelData = [{
      'Employee Name': record.Employee_Name || 'Unknown',
      'Department': record.Department || '',
      'Vehicle No': record.VehicleNo || '',
      'Total Bill Amount': record.BillAmount || 0,
      'Travel No': record.IssueId || '',
      'Travel Date': record.IssueDate || '',
      'Month-Year': `${monthName}-${yearName}`,
      'Total KM': record.TotalKM || 0,
      'Voucher Post': record.VoucherPost || '',
      'Voucher Date': record.VoucherDate || '',
      'Expenses ID': record.ExpensesId || '',
      'Expenses Name': record.ExpensesAc || '',
      'Bank Name': record.BankName || '',
      'Accounting Year': record.AccountingYear || '',
    }];

    const ws = XLSX.utils.json_to_sheet(excelData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Conveyance Details');

    const fileName = `Petrol_Conveyance_${monthName}_${yearName}.xlsx`;

    /* ────── Auto-size columns ────── */
    const range = XLSX.utils.decode_range(ws['!ref']);
    const colWidths = [];
    const headers = Object.keys(excelData[0]);

    headers.forEach((h, i) => colWidths[i] = { wch: h.length });

    for (let R = range.s.r; R <= range.e.r; ++R) {
      for (let C = range.s.c; C <= range.e.c; ++C) {
        const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
        if (!cell?.v) continue;
        const len = cell.v.toString().length;
        if (!colWidths[C] || len > colWidths[C].wch) colWidths[C] = { wch: len };
      }
    }
    ws['!cols'] = colWidths.map(w => ({ wch: w.wch + 2 }));

    /* ────── Styling ────── */
    const headerStyle = {
      font: { bold: true, color: { rgb: 'FFFFFFFF' } },
      fill: { fgColor: { rgb: 'FF4472C4' } },
      alignment: { horizontal: 'center', vertical: 'center' },
      border: { top: { style: 'thin' }, bottom: { style: 'thin' }, left: { style: 'thin' }, right: { style: 'thin' } }
    };

    const bodyStyle = {
      border: {
        top: { style: 'thin', color: { rgb: 'FFCCCCCC' } },
        bottom: { style: 'thin', color: { rgb: 'FFCCCCCC' } },
        left: { style: 'thin', color: { rgb: 'FFCCCCCC' } },
        right: { style: 'thin', color: { rgb: 'FFCCCCCC' } }
      },
      alignment: { horizontal: 'left' }
    };

    // Apply header style
    for (let C = 0; C < headers.length; ++C) {
      const addr = XLSX.utils.encode_cell({ r: 0, c: C });
      ws[addr] = ws[addr] || {};
      ws[addr].s = headerStyle;
    }

    // Apply body style + formatting
    for (let R = 1; R <= range.e.r; ++R) {
      for (let C = 0; C < headers.length; ++C) {
        const addr = XLSX.utils.encode_cell({ r: R, c: C });
        if (!ws[addr]) continue;
        ws[addr].s = bodyStyle;

        if (['Total Bill Amount', 'Total KM'].includes(headers[C])) {
          ws[addr].z = '#,##0.00';
        }
        if (['Travel Date', 'Voucher Date'].includes(headers[C])) {
          ws[addr].z = 'dd-mmm-yyyy';
          if (typeof ws[addr].v === 'string') {
            const d = new Date(ws[addr].v);
            if (!isNaN(d)) {
              ws[addr].t = 'd';
              ws[addr].v = d;
            }
          }
        }
      }
    }

    /* ────── Write to binary buffer ────── */
    const binString = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
    return { buffer: s2ab(binString), fileName };
  };

  // ──────────────────────────────────────────────────────────────
  // Upload Excel + Save to Alerts table
  // ──────────────────────────────────────────────────────────────
  const sendConveyanceEmail = async (currentRecord) => {
    const currentDate = new Date();
    const { monthName, yearName } = processDate(currentRecord.FromDate || currentDate);

    const strMessage = `Dear Darshana,

PFA of Conveyance details for the month of : ${monthName}-${yearName}
Kindly release the Conveyance amount as per attached file.

Thank & Regards,

${name}`;

    // 1. Generate Excel
    const { buffer, fileName } = generateExcelBuffer(currentRecord, monthName, yearName);

    // 2. Upload to backend
    const form = new FormData();
    form.append('file', new Blob([buffer]), fileName);

    let savedPath = '';
    try {
      const uploadRes = await axios.post(
        'https://localhost:1234/api/upload-conveyance-excel',
        form,
        { headers: { 'Content-Type': 'multipart/form-data' } }
      );
      savedPath = uploadRes.data.savedPath;
    } catch (err) {
      console.error('Upload failed:', err);
      throw new Error('Failed to upload Excel file to server.');
    }

    // 3. Save to Alerts table
    const emailData = {
      From_email: "",
      To_email: 'vilas.pawar@nyatigroup.com',
      From_Mobile: "",
      To_Mobile: "9881237983",
      SE_Type: "57",
      Submit_date: formatDateToSQL(currentDate),
      Sent_Date: formatDateToSQL(currentDate),
      Status: 0,
      Submittedby: name,
      SMS_msg: null,
      email_msg: strMessage,
      Attach1: " ",
      Attach2: savedPath,
      EmailSubject: `Petrol Conveyance for the month of : ${monthName}-${yearName}`,
      Name: "",
      Remark: "",
      SETypeinfo_Id: 0,
      Alert_Type: 0,
      Is_SMS: 0,
      Is_Mail: 1,
      Is_Popup: 0,
      Close_Date: formatDateToSQL(currentDate),
      Alert_to: 0,
      Alert_From: 0,
      Module_Name: "HR",
      Schedule_Date: formatDateToSQL(currentDate),
      GroupBY: "",
      GroupOf: "",
      CC_Email: " ",
      BCC_Email: "",
      SMSstatus: 0,
      SMSRemark: "",
      SMSCount: null,
      TrayId: null,
      Guid: 351
    };

    try {
      await axios.post('https://localhost:1234/api/Save-Email-Data', emailData, {
        headers: { 'Content-Type': 'application/json' }
      });
      console.log('Email alert saved with file path:', savedPath);
      return true;
    } catch (err) {
      console.error('Failed to save email alert:', err);
      throw new Error('Failed to save email alert.');
    }
  };

  // ──────────────────────────────────────────────────────────────
  // Generate Voucher No & IDs
  // ──────────────────────────────────────────────────────────────
  const generateVoucherNo = async (Company_No, Voucher_Type_No, Acc_Year) => {
    try {
      const [voucherNoRes, voucherIdRes] = await Promise.all([
        axios.get(`https://localhost:1234/api/max-voucher-no?Company_No=${Company_No}&Voucher_Type_No=${Voucher_Type_No}&Acc_Year=${Acc_Year}`),
        axios.get(`https://localhost:1234/api/max-voucher-Id`)
      ]);

      const maxVoucherNo = voucherNoRes.data || 0;
      const maxVoucherId = voucherIdRes.data || 0;

      return {
        newVoucherNo: maxVoucherNo + 1,
        voucherId1: maxVoucherId + 1,
        voucherId2: maxVoucherId + 2,
      };
    } catch (err) {
      throw new Error('Failed to generate voucher numbers.', err);
    }
  };

  // ──────────────────────────────────────────────────────────────
  // Fetch Data
  // ──────────────────────────────────────────────────────────────
  useEffect(() => {
    const fetchEmployeeData = async () => {
      if (!name) {
        setError('No user logged in.');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const res = await axios.get(`https://localhost:1234/api/PetrolHead`);
        const dataArray = Array.isArray(res.data.data) ? res.data.data : Array.isArray(res.data) ? res.data : [];

        const filteredData = dataArray.filter(emp =>
          emp.Employee_Name?.toLowerCase() === name ||
          name === 'vilas.pawar' ||
          name === 'ajay.hingmire'
        );

        const processedData = filteredData.map(emp => {
          const { monthName, yearName } = processDate(emp.FromDate);
          const voucherType = Number(emp.BillAmount) >= 1000 ? 4 : 2;
          return { ...emp, monthName, yearName, VoucherType: voucherType };
        });

        setEmployeeData(processedData);
        if (processedData.length === 0) setError('No records found.');
      } catch (err) {
        setError(err.response?.status === 404 ? 'No data found.' : 'Failed to load data.');
      } finally {
        setLoading(false);
      }
    };

    fetchEmployeeData();
  }, [name]);

  // ──────────────────────────────────────────────────────────────
  // Handle Input Change
  // ──────────────────────────────────────────────────────────────
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => {
      if (name === 'issueId') {
        const selected = employeeData.find(emp => emp.IssueId === value);
        const voucherDate = selected?.IssueDate
          ? formatDateToSQL(selected.IssueDate)
          : formatDateToSQL(new Date());
        return { ...prev, issueId: value, VoucherDate: voucherDate };
      }
      return { ...prev, [name]: value };
    });
    setUpdateStatus(null);
    setError(null);
  };

  // ──────────────────────────────────────────────────────────────
  // Handle Update
  // ──────────────────────────────────────────────────────────────
  const handleUpdate = async () => {
    if (!formData.issueId || !formData.VoucherPost || !formData.VoucherDate) {
      setError('Please fill all fields.');
      setUpdateStatus('error');
      setTimeout(() => { setError(null); setUpdateStatus(null); }, 3000);
      return;
    }

    try {
      setUpdateStatus('updating');

      const res = await axios.get(`https://localhost:1234/api/PetrolHead/${formData.issueId}`);
      let currentRecord = res.data.data || res.data;
      if (Array.isArray(currentRecord)) currentRecord = currentRecord[0] || {};

      if (!currentRecord.AccountingYear || !currentRecord.CompanyId) {
        throw new Error('Missing required fields.');
      }

      // Update PetrolHead
      await axios.put(
        `https://localhost:1234/api/PetrolHead/HRApproved/${formData.issueId}`,
        { ...currentRecord, VoucherPost: formData.VoucherPost, VoucherDate: formData.VoucherDate }
      );

      let newVoucherNo = null;
      if (formData.VoucherPost === 'Y') {
        const voucherAmount = Number(currentRecord.BillAmount) || 0;
        const voucherType = voucherAmount >= 1000 ? 4 : 2;

        const { newVoucherNo: fetchedNo, voucherId1, voucherId2 } = await generateVoucherNo(
          currentRecord.CompanyId,
          voucherType,
          currentRecord.AccountingYear
        );
        newVoucherNo = fetchedNo;

        const currentDate = formData.VoucherDate;

        const voucherData1 = {
          Company_No: currentRecord.CompanyId,
          Acc_Year: currentRecord.AccountingYear,
          Voucher_No: newVoucherNo,
          Voucher_Type_No: voucherType,
          Date: currentDate,
          Account_No: Number(currentRecord.ExpensesId),
          Amount: voucherAmount,
          Narration: `Being amount paid to ${currentRecord.Employee_Name} towards Petrol Allowance for ${processDate(currentRecord.FromDate).monthName}-${processDate(currentRecord.FromDate).yearName}`,
          Reference_No: formData.issueId,
          Cheque_No: '',
          Cheque_Date: currentDate,
          Bank_Name: currentRecord.BankName || '',
          Voucher_ID: voucherId1,
          Schd_Amt: voucherAmount,
          Cost_Centre_No: Number(currentRecord.CostcenterId),
          Bill_No: null,
          Bill_Date: currentDate,
          Due_Date: currentDate,
          Other_AcNo: Number(currentRecord.BankId),
          Posted: 0,
          Branch_id: Number(currentRecord.Branch_id) || 0,
          Cost_Centre_no2: 0,
          Cost_Centre_no3: 0,
        };

        const voucherData2 = {
          ...voucherData1,
          Account_No: currentRecord.BankId,
          Other_AcNo: currentRecord.ExpensesId,
          Amount: -voucherAmount,
          Schd_Amt: -voucherAmount,
          Voucher_ID: voucherId2,
        };

        await Promise.all([
          axios.post('https://localhost:1234/api/Voucher-created', voucherData1),
          axios.post('https://localhost:1234/api/Voucher-created', voucherData2),
          sendConveyanceEmail(currentRecord)
        ]);
      }

      // Update UI
      setEmployeeData(prev => prev.map(emp =>
        emp.IssueId === formData.issueId
          ? {
              ...emp,
              VoucherPost: formData.VoucherPost,
              VoucherDate: formData.VoucherDate,
              Voucher_No: formData.VoucherPost === 'Y' ? newVoucherNo : emp.Voucher_No
            }
          : emp
      ));

      setFormData({ issueId: '', VoucherPost: '', VoucherDate: '' });
      setUpdateStatus('success');
      setTimeout(() => setUpdateStatus(null), 2000);
    } catch (err) {
      console.error(err);
      setError(err.message || 'Update failed.');
      setUpdateStatus('error');
      setTimeout(() => { setError(null); setUpdateStatus(null); }, 3000);
    }
  };

  const handleRefresh = () => window.location.reload();

  if (loading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="container-fluid mx-auto p-4">
      {error && <div className="alert alert-danger text-center">{error}</div>}

      <div className="row g-3 mb-4">
        <div className="col-md-2">
          <label className="form-label">Issue ID</label>
          <select name="issueId" value={formData.issueId} onChange={handleInputChange} className="form-control">
            <option value="">Select</option>
            {employeeData.map(emp => (
              <option key={emp.IssueId} value={emp.IssueId}>{emp.IssueId}</option>
            ))}
          </select>
        </div>

        <div className="col-md-2">
          <label className="form-label">Voucher Post</label>
          <select name="VoucherPost" value={formData.VoucherPost} onChange={handleInputChange} className="form-control">
            <option value="">Select</option>
            <option value="Y">Y</option>
            <option value="N">N</option>
          </select>
        </div>

        <div className="col-md-2">
          <label className="form-label">Voucher Date</label>
          <input type="date" name="VoucherDate" value={formData.VoucherDate} onChange={handleInputChange} className="form-control" />
        </div>

        <div className="col-md-3 d-flex align-items-end">
          <button
            onClick={handleUpdate}
            disabled={updateStatus === 'updating'}
            className={`btn me-2 ${updateStatus === 'updating' ? 'btn-secondary' : updateStatus === 'success' ? 'btn-success' : updateStatus === 'error' ? 'btn-danger' : 'btn-primary'}`}
          >
            {updateStatus === 'updating' ? 'Updating...' : updateStatus === 'success' ? 'Success' : updateStatus === 'error' ? 'Failed' : 'Update'}
          </button>
          <button onClick={handleRefresh} className="btn btn-outline-primary">Refresh</button>
        </div>
      </div>

      <div className="table-responsive">
        <table className="table table-bordered table-hover">
          <thead className="table-dark">
            <tr>
              <th>Employee Name</th>
              <th>Department</th>
              <th>Vehicle No</th>
              <th>Bill Amount</th>
              <th>Issue ID</th>
              <th>Travel Date</th>
              <th>Month</th>
              <th>Total KM</th>
              <th>Approved</th>
              <th>Submitted To</th>
              <th>Submitted Date</th>
              <th>HOD Approved</th>
              <th>Approved Date</th>
              <th>Post</th>
              <th>Post Date</th>
              <th>Expenses ID</th>
              <th>Expenses Name</th>
              <th>Accounting Year</th>
              <th>Bank ID</th>
              <th>Bank Name</th>
            </tr>
          </thead>
          <tbody>
            {employeeData.length > 0 ? employeeData.map(emp => (
              <tr key={emp.IssueId}>
                <td>{emp.Employee_Name}</td>
                <td>{emp.Department}</td>
                <td>{emp.VehicleNo}</td>
                <td>{emp.BillAmount}</td>
                <td>
                  <Link
                    to={`/Conveyance_Allowance?issueId=${emp.IssueId}&employeeName=${encodeURIComponent(emp.Employee_Name)}&department=${encodeURIComponent(emp.Department)}&empCode=${encodeURIComponent(emp.EmpCode)}`}
                    className="text-primary"
                  >
                    {emp.IssueId}
                  </Link>
                </td>
                <td>{emp.IssueDate}</td>
                <td>{`${emp.monthName}-${emp.yearName}`}</td>
                <td>{emp.TotalKM}</td>
                <td>{emp.Approved}</td>
                <td>{emp.SubmittedTo}</td>
                <td>{emp.SubmittedDate}</td>
                <td>{emp.ApprovedBy}</td>
                <td>{emp.ApprovedDate}</td>
                <td>{emp.VoucherPost || ''}</td>
                <td>{emp.VoucherDate}</td>
                <td>{emp.ExpensesId}</td>
                <td>{emp.ExpensesAc}</td>
                <td>{emp.AccountingYear}</td>
                <td>{emp.BankId}</td>
                <td>{emp.BankName}</td>
              </tr>
            )) : (
              <tr><td colSpan="20" className="text-center">No records found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default TravelApprovedHR;
